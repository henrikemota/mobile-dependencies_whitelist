name: Label PR based on file names

on:
  pull_request:
    types: [opened, synchronize]

jobs:
  apply-labels:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v3
      with:
        fetch-depth: 0  # Faz o checkout de todo o histórico

    - name: Get list of changed files
      id: changed_files
      run: |
        git fetch --depth=1
        FILES=$(git diff --name-only ${{ github.event.before }} ${{ github.sha }})
        echo "FILES=$FILES" >> $GITHUB_ENV  # Armazena os arquivos em um arquivo de ambiente

    - name: Apply labels
      run: |
        FILES="$FILES"  # Usa a variável de ambiente
        echo "Modified files: $FILES"
        LABELS=""

        # Verifica se o nome do arquivo contém 'ios' ou 'android'
        if echo "$FILES" | grep -i 'ios'; then
          LABELS="${LABELS}ios,"
        fi
        if echo "$FILES" | grep -i 'android'; then
          LABELS="${LABELS}android,"
        fi

        # Remove a vírgula final, se houver labels
        if [ -n "$LABELS" ]; then
          LABELS=$(echo "$LABELS" | sed 's/,$//')
          echo "LABELS=$LABELS" >> $GITHUB_ENV  # Armazena as labels no ambiente
        else
          echo "No labels to apply."
          exit 0  # Saia sem erro se não houver labels
        fi

    - name: Set GitHub labels
      uses: actions/github-script@v6
      with:
        script: |
          const labels = process.env.LABELS ? process.env.LABELS.split(',') : [];
          const prNumber = context.issue.number;

          if (labels.length > 0 && labels[0] !== "") {
            await github.rest.issues.addLabels({
              issue_number: prNumber,
              owner: context.repo.owner,
              repo: context.repo.repo,
              labels: labels,
            });
            console.log(`Labels applied: ${labels}`);
          } else {
            console.log("No labels to apply.");
          }
